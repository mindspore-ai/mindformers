# Copyright 2025 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
"""expected output of MLP"""
import numpy as np
import mindspore as ms
from mindformers.parallel_core.transformer_config import TransformerConfig


def get_init_params(args, config: TransformerConfig, seq_length=4, batch_size=2):
    """Generate initialization parameters"""
    np.random.seed(1)
    input_size = args.input_size if args.input_size else config.hidden_size
    if config.gated_linear_unit:
        state_dict = {
            "mlp.linear_fc1.weight": 0.01 * np.random.rand(2 * config.ffn_hidden_size, input_size),
            "mlp.linear_fc2.weight": 0.01 * np.random.rand(input_size, config.ffn_hidden_size)
        }
        if config.tensor_model_parallel_size == 2:
            part_0, part_1, part_2, part_3 = np.split(state_dict['mlp.linear_fc1.weight'], 4, axis=0)
            state_dict['mlp.linear_fc1.weight'] = np.concatenate([part_0, part_2, part_1, part_3], axis=0)
    else:
        state_dict = {
            "mlp.linear_fc1.weight": 0.01 * np.random.rand(config.ffn_hidden_size, input_size),
            "mlp.linear_fc2.weight": 0.01 * np.random.rand(input_size, config.ffn_hidden_size)
        }
    for k in state_dict:
        state_dict[k] = ms.Parameter(ms.tensor(state_dict[k], dtype=ms.float32))

    input_ = np.random.rand(seq_length, batch_size, input_size)
    input_ = ms.tensor(input_, dtype=ms.bfloat16)

    return input_, state_dict


def get_golden_datas(args) -> dict[str, np.ndarray]:
    """Generate golden data for test."""
    if args.input_size is not None:
        output_golden = np.array(
            [[[0.0003073525, 0.0003919659, 0.0003239757, 0.0003281751,
               0.0003346751, 0.0003165944, 0.0002959230, 0.0004041553,
               0.0003025495, 0.0003070646, 0.0003972220, 0.0003377221,
               0.0003412065, 0.0002973296, 0.0003224678, 0.0002665542,
               0.0003531910, 0.0003414791, 0.0003648576, 0.0002979014,
               0.0003515228, 0.0003832327, 0.0003071420, 0.0004242932,
               0.0002757763, 0.0003666411, 0.0003079721, 0.0002489885,
               0.0003670758, 0.0003475152, 0.0003272609, 0.0002632126],
              [0.0002740786, 0.0003522557, 0.0002935623, 0.0002929559,
               0.0003025138, 0.0002797743, 0.0002585604, 0.0003602443,
               0.0002645828, 0.0002748249, 0.0003519520, 0.0002979352,
               0.0002961495, 0.0002676441, 0.0002895632, 0.0002327064,
               0.0003127044, 0.0003011632, 0.0003305972, 0.0002666157,
               0.0003149424, 0.0003405595, 0.0002711534, 0.0003829127,
               0.0002407380, 0.0003250828, 0.0002743963, 0.0002170611,
               0.0003275694, 0.0003046590, 0.0002905766, 0.0002351358]],
             [[0.0002727688, 0.0003470307, 0.0002889643, 0.0002871081,
               0.0002951032, 0.0002794539, 0.0002588205, 0.0003593889,
               0.0002657296, 0.0002756345, 0.0003498732, 0.0002957024,
               0.0002971400, 0.0002675557, 0.0002797495, 0.0002359149,
               0.0003140161, 0.0003029154, 0.0003208048, 0.0002664726,
               0.0003136993, 0.0003375675, 0.0002617282, 0.0003756282,
               0.0002401855, 0.0003237129, 0.0002663508, 0.0002228909,
               0.0003286622, 0.0003027668, 0.0002799342, 0.0002322521],
              [0.0002894901, 0.0003752167, 0.0003009538, 0.0003057206,
               0.0003173909, 0.0003013674, 0.0002814166, 0.0003848340,
               0.0002880732, 0.0002906139, 0.0003769991, 0.0003146873,
               0.0003140058, 0.0002812605, 0.0003084060, 0.0002485122,
               0.0003282619, 0.0003129079, 0.0003504625, 0.0002874472,
               0.0003335699, 0.0003503716, 0.0002873610, 0.0004032105,
               0.0002538477, 0.0003368887, 0.0002974920, 0.0002335988,
               0.0003439227, 0.0003246623, 0.0003087024, 0.0002458274]],
             [[0.0002933595, 0.0003836604, 0.0003169995, 0.0003221086,
               0.0003257339, 0.0003190843, 0.0002922687, 0.0003985592,
               0.0002980375, 0.0002971108, 0.0003863365, 0.0003348700,
               0.0003428771, 0.0002910180, 0.0003126974, 0.0002669751,
               0.0003419540, 0.0003344458, 0.0003518882, 0.0002893473,
               0.0003517373, 0.0003738546, 0.0003053154, 0.0004082366,
               0.0002766654, 0.0003611602, 0.0003042159, 0.0002416652,
               0.0003506544, 0.0003404014, 0.0003200317, 0.0002594959],
              [0.0002862460, 0.0003743861, 0.0003047547, 0.0003039239,
               0.0003168832, 0.0002963612, 0.0002759639, 0.0003816602,
               0.0002832345, 0.0002884340, 0.0003727148, 0.0003127173,
               0.0003155669, 0.0002821974, 0.0003041769, 0.0002487796,
               0.0003238740, 0.0003131801, 0.0003427701, 0.0002810743,
               0.0003379555, 0.0003510784, 0.0002860589, 0.0003983733,
               0.0002528477, 0.0003388091, 0.0002939193, 0.0002294399,
               0.0003437484, 0.0003198545, 0.0003070191, 0.0002465417]],
             [[0.0002756827, 0.0003581393, 0.0002899832, 0.0002982331,
               0.0003004352, 0.0002969832, 0.0002698010, 0.0003647619,
               0.0002638584, 0.0002710520, 0.0003598816, 0.0003071863,
               0.0003067454, 0.0002609718, 0.0002852858, 0.0002416286,
               0.0003124618, 0.0003036494, 0.0003336510, 0.0002638887,
               0.0003190766, 0.0003460698, 0.0002765137, 0.0003751558,
               0.0002584687, 0.0003326134, 0.0002812482, 0.0002210197,
               0.0003231779, 0.0003140298, 0.0002978852, 0.0002368321],
              [0.0003387441, 0.0004249654, 0.0003532096, 0.0003579149,
               0.0003657652, 0.0003556000, 0.0003262130, 0.0004423618,
               0.0003307523, 0.0003332571, 0.0004343800, 0.0003717157,
               0.0003764877, 0.0003263053, 0.0003487327, 0.0002937657,
               0.0003890731, 0.0003737298, 0.0003929233, 0.0003238416,
               0.0003879219, 0.0004157623, 0.0003317075, 0.0004605208,
               0.0003049502, 0.0003988849, 0.0003348976, 0.0002737885,
               0.0003976959, 0.0003760839, 0.0003500250, 0.0002923071]]], dtype=np.float32)
    elif args.gated_linear_unit:
        output_golden = np.array(
            [[[0.0000733683, 0.0000909508, 0.0000698835, 0.0000924880,
               0.0000818640, 0.0000622055, 0.0000739467, 0.0000799153,
               0.0000613963, 0.0000783803, 0.0001000925, 0.0000622146,
               0.0000825421, 0.0000920034, 0.0000837915, 0.0000794538],
              [0.0000712826, 0.0000899131, 0.0000682673, 0.0000903676,
               0.0000802998, 0.0000608406, 0.0000726998, 0.0000809333,
               0.0000613315, 0.0000799796, 0.0000957279, 0.0000623976,
               0.0000820426, 0.0000919889, 0.0000813653, 0.0000806986]],
             [[0.0000715935, 0.0000869136, 0.0000652340, 0.0000865586,
               0.0000756654, 0.0000545406, 0.0000684799, 0.0000776089,
               0.0000568416, 0.0000765296, 0.0000909929, 0.0000576520,
               0.0000780936, 0.0000876632, 0.0000774766, 0.0000762414],
              [0.0000565747, 0.0000683313, 0.0000524830, 0.0000693377,
               0.0000612595, 0.0000447933, 0.0000551950, 0.0000600794,
               0.0000456970, 0.0000579404, 0.0000745601, 0.0000464607,
               0.0000611514, 0.0000688959, 0.0000618574, 0.0000586497]],
             [[0.0000475586, 0.0000567166, 0.0000434163, 0.0000556350,
               0.0000505326, 0.0000368306, 0.0000435420, 0.0000520190,
               0.0000373207, 0.0000498961, 0.0000599300, 0.0000388123,
               0.0000510283, 0.0000581764, 0.0000494977, 0.0000496677],
              [0.0000790294, 0.0000975368, 0.0000734458, 0.0000979018,
               0.0000879520, 0.0000647741, 0.0000777439, 0.0000885753,
               0.0000676341, 0.0000855171, 0.0001044117, 0.0000675433,
               0.0000888914, 0.0001019846, 0.0000868552, 0.0000866440]],
             [[0.0000510057, 0.0000659857, 0.0000510755, 0.0000665491,
               0.0000574119, 0.0000449925, 0.0000532988, 0.0000589157,
               0.0000445915, 0.0000595711, 0.0000696541, 0.0000439622,
               0.0000604231, 0.0000656269, 0.0000605255, 0.0000585135],
              [0.0000542883, 0.0000657589, 0.0000502881, 0.0000662970,
               0.0000581312, 0.0000414027, 0.0000525229, 0.0000580756,
               0.0000438181, 0.0000575348, 0.0000698252, 0.0000446309,
               0.0000585120, 0.0000660210, 0.0000589243, 0.0000574732]]], dtype=np.float32)
    else:
        output_golden = np.array(
            [[[0.0017414739, 0.0018487792, 0.0017199146, 0.0013846543,
               0.0012862221, 0.0020816431, 0.0019175113, 0.0014373211,
               0.0013844393, 0.0015804252, 0.0012110893, 0.0018034461,
               0.0014611555, 0.0017085664, 0.0015952593, 0.0015352677],
              [0.0019919416, 0.0020969177, 0.0019119657, 0.0016831061,
               0.0015097546, 0.0024931964, 0.0022334943, 0.0015607530,
               0.0016224522, 0.0018226021, 0.0013644423, 0.0020328050,
               0.0016648017, 0.0019004948, 0.0018370659, 0.0017043886]],
             [[0.0015751260, 0.0016880741, 0.0015236203, 0.0013121577,
               0.0011900065, 0.0019737678, 0.0017540415, 0.0012518927,
               0.0012730283, 0.0014253005, 0.0010885255, 0.0016146263,
               0.0013117085, 0.0015241898, 0.0014786809, 0.0013727419],
              [0.0019514252, 0.0020915624, 0.0018961922, 0.0016189103,
               0.0014609485, 0.0024405473, 0.0021871955, 0.0015791889,
               0.0015751384, 0.0017856713, 0.0013288374, 0.0019960622,
               0.0016252893, 0.0018935392, 0.0017961639, 0.0017028205]],
             [[0.0018867148, 0.0020168365, 0.0018601861, 0.0015550752,
               0.0014348353, 0.0022915448, 0.0021151179, 0.0015194945,
               0.0015332238, 0.0017510453, 0.0013417912, 0.0019695892,
               0.0015768812, 0.0018295512, 0.0017305955, 0.0016419239],
              [0.0014538650, 0.0015827805, 0.0014461200, 0.0012378941,
               0.0010918338, 0.0018326158, 0.0016430839, 0.0011372042,
               0.0012296749, 0.0013730322, 0.0010569921, 0.0015125085,
               0.0011989862, 0.0014621870, 0.0013702807, 0.0012903372]],
             [[0.0017733796, 0.0019430587, 0.0017720656, 0.0014609765,
               0.0013720200, 0.0021825042, 0.0020178643, 0.0014793403,
               0.0014748116, 0.0016822204, 0.0012621277, 0.0018532595,
               0.0014871625, 0.0017542860, 0.0016103230, 0.0015683112],
              [0.0018832930, 0.0020078733, 0.0018468696, 0.0015462689,
               0.0014222845, 0.0022924296, 0.0021196704, 0.0015214478,
               0.0015399234, 0.0017200317, 0.0013087805, 0.0019487045,
               0.0015966668, 0.0018407278, 0.0016958695, 0.0016332783]]], dtype=np.float32)

    return output_golden


def get_gpu_datas(args) -> dict[str, np.ndarray]:
    """Generate gpu data for test."""
    if args.input_size == 32:
        output_gpu = np.array(
            [[[0.0003070831, 0.0003910065, 0.0003242493, 0.0003280640,
               0.0003337860, 0.0003166199, 0.0002956390, 0.0004043579,
               0.0003013611, 0.0003070831, 0.0003967285, 0.0003376007,
               0.0003414154, 0.0002975464, 0.0003223419, 0.0002670288,
               0.0003528595, 0.0003414154, 0.0003643036, 0.0002975464,
               0.0003509521, 0.0003833771, 0.0003070831, 0.0004234314,
               0.0002765656, 0.0003662109, 0.0003070831, 0.0002479553,
               0.0003662109, 0.0003471375, 0.0003280640, 0.0002632141],
              [0.0002746582, 0.0003528595, 0.0002937317, 0.0002918243,
               0.0003013611, 0.0002803802, 0.0002574921, 0.0003604889,
               0.0002651215, 0.0002746582, 0.0003528595, 0.0002975464,
               0.0002956390, 0.0002670288, 0.0002899170, 0.0002326965,
               0.0003128052, 0.0003013611, 0.0003299713, 0.0002670288,
               0.0003147125, 0.0003414154, 0.0002708435, 0.0003833771,
               0.0002412796, 0.0003242493, 0.0002746582, 0.0002174377,
               0.0003280640, 0.0003051758, 0.0002899170, 0.0002346039]],
             [[0.0002727509, 0.0003452301, 0.0002880096, 0.0002861023,
               0.0002937317, 0.0002784729, 0.0002593994, 0.0003585815,
               0.0002651215, 0.0002746582, 0.0003490448, 0.0002956390,
               0.0002975464, 0.0002670288, 0.0002803802, 0.0002355576,
               0.0003128052, 0.0003032684, 0.0003204346, 0.0002651215,
               0.0003128052, 0.0003376007, 0.0002613068, 0.0003757477,
               0.0002403259, 0.0003223419, 0.0002651215, 0.0002222061,
               0.0003280640, 0.0003032684, 0.0002784729, 0.0002317429],
              [0.0002899170, 0.0003757477, 0.0003013611, 0.0003051758,
               0.0003185272, 0.0003013611, 0.0002822876, 0.0003852844,
               0.0002880096, 0.0002918243, 0.0003776550, 0.0003147125,
               0.0003147125, 0.0002822876, 0.0003089905, 0.0002479553,
               0.0003280640, 0.0003128052, 0.0003509521, 0.0002880096,
               0.0003337860, 0.0003509521, 0.0002880096, 0.0004043579,
               0.0002536774, 0.0003376007, 0.0002975464, 0.0002336502,
               0.0003452301, 0.0003261566, 0.0003089905, 0.0002460480]],
             [[0.0002937317, 0.0003833771, 0.0003166199, 0.0003223419,
               0.0003261566, 0.0003185272, 0.0002918243, 0.0003986359,
               0.0002975464, 0.0002975464, 0.0003852844, 0.0003356934,
               0.0003433228, 0.0002918243, 0.0003128052, 0.0002670288,
               0.0003414154, 0.0003337860, 0.0003509521, 0.0002880096,
               0.0003509521, 0.0003738403, 0.0003051758, 0.0004081726,
               0.0002765656, 0.0003604889, 0.0003032684, 0.0002412796,
               0.0003509521, 0.0003395081, 0.0003204346, 0.0002593994],
              [0.0002861023, 0.0003738403, 0.0003051758, 0.0003032684,
               0.0003166199, 0.0002956390, 0.0002765656, 0.0003814697,
               0.0002841949, 0.0002880096, 0.0003738403, 0.0003128052,
               0.0003166199, 0.0002822876, 0.0003051758, 0.0002498627,
               0.0003242493, 0.0003128052, 0.0003433228, 0.0002803802,
               0.0003376007, 0.0003509521, 0.0002861023, 0.0003986359,
               0.0002536774, 0.0003395081, 0.0002937317, 0.0002288818,
               0.0003433228, 0.0003204346, 0.0003070831, 0.0002460480]],
             [[0.0002746582, 0.0003566742, 0.0002899170, 0.0002975464,
               0.0002994537, 0.0002956390, 0.0002689362, 0.0003643036,
               0.0002632141, 0.0002708435, 0.0003585815, 0.0003070831,
               0.0003070831, 0.0002613068, 0.0002861023, 0.0002412796,
               0.0003128052, 0.0003032684, 0.0003337860, 0.0002632141,
               0.0003185272, 0.0003452301, 0.0002765656, 0.0003738403,
               0.0002574921, 0.0003318787, 0.0002803802, 0.0002202988,
               0.0003223419, 0.0003147125, 0.0002975464, 0.0002365112],
              [0.0003395081, 0.0004253387, 0.0003528595, 0.0003585815,
               0.0003662109, 0.0003547668, 0.0003261566, 0.0004425049,
               0.0003299713, 0.0003337860, 0.0004348755, 0.0003719330,
               0.0003757477, 0.0003261566, 0.0003490448, 0.0002937317,
               0.0003890991, 0.0003738403, 0.0003929138, 0.0003242493,
               0.0003871918, 0.0004158020, 0.0003318787, 0.0004596710,
               0.0003051758, 0.0003986359, 0.0003356934, 0.0002746582,
               0.0003986359, 0.0003757477, 0.0003490448, 0.0002918243]]], dtype=np.float16)
    elif args.gated_linear_unit:
        output_gpu = np.array(
            [[[0.0000734329, 0.0000910759, 0.0000700951, 0.0000925064,
               0.0000820160, 0.0000624657, 0.0000739098, 0.0000801086,
               0.0000615120, 0.0000786781, 0.0001001358, 0.0000624657,
               0.0000824928, 0.0000920296, 0.0000839233, 0.0000796318],
              [0.0000715256, 0.0000901222, 0.0000681877, 0.0000905991,
               0.0000805855, 0.0000610352, 0.0000729561, 0.0000810623,
               0.0000615120, 0.0000801086, 0.0000958443, 0.0000624657,
               0.0000824928, 0.0000920296, 0.0000815392, 0.0000810623]],
             [[0.0000715256, 0.0000867844, 0.0000653267, 0.0000867844,
               0.0000758171, 0.0000545979, 0.0000686646, 0.0000777245,
               0.0000567436, 0.0000767708, 0.0000910759, 0.0000576973,
               0.0000782013, 0.0000877380, 0.0000772476, 0.0000762939],
              [0.0000562668, 0.0000681877, 0.0000522137, 0.0000691414,
               0.0000610352, 0.0000445843, 0.0000550747, 0.0000598431,
               0.0000455379, 0.0000576973, 0.0000743866, 0.0000462532,
               0.0000610352, 0.0000686646, 0.0000615120, 0.0000584126]],
             [[0.0000474453, 0.0000567436, 0.0000433922, 0.0000555515,
               0.0000505447, 0.0000367165, 0.0000436306, 0.0000519753,
               0.0000371933, 0.0000498295, 0.0000598431, 0.0000388622,
               0.0000510216, 0.0000581741, 0.0000495911, 0.0000495911],
              [0.0000791550, 0.0000972748, 0.0000734329, 0.0000977516,
               0.0000877380, 0.0000648499, 0.0000777245, 0.0000886917,
               0.0000677109, 0.0000853539, 0.0001044273, 0.0000677109,
               0.0000891685, 0.0001020432, 0.0000867844, 0.0000867844]],
             [[0.0000510216, 0.0000658035, 0.0000510216, 0.0000667572,
               0.0000574589, 0.0000450611, 0.0000531673, 0.0000588894,
               0.0000445843, 0.0000596046, 0.0000696182, 0.0000438690,
               0.0000605583, 0.0000658035, 0.0000605583, 0.0000584126],
              [0.0000543594, 0.0000658035, 0.0000503063, 0.0000662804,
               0.0000581741, 0.0000414848, 0.0000526905, 0.0000581741,
               0.0000438690, 0.0000576973, 0.0000700951, 0.0000445843,
               0.0000586510, 0.0000662804, 0.0000591278, 0.0000574589]]], dtype=np.float16)
    else:
        output_gpu = np.array(
            [[[0.0017395020, 0.0018463135, 0.0017166138, 0.0013809204,
               0.0012817383, 0.0020751953, 0.0019149780, 0.0014343262,
               0.0013809204, 0.0015792847, 0.0012054443, 0.0018005371,
               0.0014572144, 0.0017089844, 0.0015945435, 0.0015335083],
              [0.0019989014, 0.0020904541, 0.0019149780, 0.0016860962,
               0.0015106201, 0.0024871826, 0.0022277832, 0.0015563965,
               0.0016174316, 0.0018234253, 0.0013656616, 0.0020294189,
               0.0016632080, 0.0018997192, 0.0018386841, 0.0017013550]],
             [[0.0015716553, 0.0016860962, 0.0015258789, 0.0013122559,
               0.0011901855, 0.0019683838, 0.0017547607, 0.0012512207,
               0.0012741089, 0.0014266968, 0.0010910034, 0.0016174316,
               0.0013122559, 0.0015258789, 0.0014801025, 0.0013732910],
              [0.0019531250, 0.0020904541, 0.0018997192, 0.0016174316,
               0.0014572144, 0.0024414062, 0.0021820068, 0.0015792847,
               0.0015792847, 0.0017852783, 0.0013275146, 0.0019989014,
               0.0016250610, 0.0018920898, 0.0017929077, 0.0017013550]],
             [[0.0018844604, 0.0020141602, 0.0018615723, 0.0015563965,
               0.0014343262, 0.0022888184, 0.0021209717, 0.0015182495,
               0.0015335083, 0.0017471313, 0.0013427734, 0.0019683838,
               0.0015716553, 0.0018310547, 0.0017318726, 0.0016403198],
              [0.0014572144, 0.0015869141, 0.0014495850, 0.0012359619,
               0.0010910034, 0.0018310547, 0.0016479492, 0.0011367798,
               0.0012283325, 0.0013732910, 0.0010604858, 0.0015106201,
               0.0011978149, 0.0014648438, 0.0013732910, 0.0012893677]],
             [[0.0017776489, 0.0019454956, 0.0017700195, 0.0014648438,
               0.0013732910, 0.0021820068, 0.0020141602, 0.0014801025,
               0.0014724731, 0.0016784668, 0.0012588501, 0.0018539429,
               0.0014877319, 0.0017547607, 0.0016098022, 0.0015640259],
              [0.0018844604, 0.0020141602, 0.0018463135, 0.0015487671,
               0.0014190674, 0.0022888184, 0.0021209717, 0.0015182495,
               0.0015411377, 0.0017166138, 0.0013046265, 0.0019454956,
               0.0015945435, 0.0018386841, 0.0016937256, 0.0016326904]]], dtype=np.float16)

    return output_gpu
