# pylint: skip-file
# Copyright 2025 Huawei Technologies Co., Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ============================================================================
import argparse
import os

import mindspore as ms
from mindspore import nn, Tensor
from mindspore.communication import init
from mindspore.ops.auto_generate import SumExt

from mindformers.experimental.graph.transformer.transformer_config import TransformerConfig
from mindformers.experimental.graph.transformer.rotary_pos_embedding import ApplyRotaryPosEmb


inputs = ms.tensor(
    [[[[-1.2265625000, -0.0093154907, 1.5419921875, -0.4655761719],
       [0.2795410156, -0.2609863281, 0.6230468750, -1.1562500000],
       [0.1170654297, -1.8867187500, 2.1816406250, -0.1929931641],
       [0.5356445312, -0.8896484375, -0.3098144531, 0.7739257812],
       [0.1236572266, -2.1816406250, 0.3698730469, 0.4143066406],
       [1.8564453125, 1.9775390625, -0.4321289062, 1.3671875000],
       [0.8432617188, -0.0421142578, 1.6582031250, -1.3085937500],
       [0.9960937500, 0.9389648438, 1.4150390625, 0.6342773438]],

      [[2.7265625000, -1.4755859375, -1.4804687500, 0.0498352051],
       [1.2880859375, -0.6489257812, -0.8969726562, 1.2636718750],
       [0.8271484375, 0.4594726562, 0.3923339844, -1.0771484375],
       [-0.0575561523, -0.0595703125, 0.2763671875, -0.2402343750],
       [0.7202148438, -1.4111328125, -0.4384765625, 0.3549804688],
       [0.3730468750, -1.3046875000, -0.7983398438, 1.0439453125],
       [-0.1226806641, 0.4020996094, -1.4296875000, -0.5654296875],
       [0.6972656250, 0.1258544922, -0.0434265137, 0.5366210938]]],

     [[[0.3171386719, -1.8720703125, -0.0894775391, 0.7485351562],
       [0.6137695312, -0.4418945312, 0.0983886719, -0.1519775391],
       [-0.5458984375, 0.9423828125, 0.3298339844, 1.5263671875],
       [-0.1864013672, 0.9194335938, -0.3249511719, 1.3994140625],
       [-1.2412109375, -0.1413574219, -0.5795898438, -0.3693847656],
       [-1.1542968750, 1.1679687500, 0.1884765625, 1.3583984375],
       [0.1845703125, 1.2363281250, 0.9799804688, 0.1696777344],
       [-0.9946289062, 1.1162109375, 0.9169921875, 1.7910156250]],

      [[0.7456054688, -0.2200927734, -0.1092529297, 0.7529296875],
       [0.6875000000, -1.0830078125, -0.8232421875, -0.7954101562],
       [0.9458007812, -0.9794921875, 0.1055908203, -1.1015625000],
       [-0.1636962891, -0.5727539062, 0.6923828125, -0.3151855469],
       [0.4694824219, 0.4211425781, 1.3750000000, 0.2873535156],
       [1.3505859375, -0.4172363281, -1.2382812500, 0.5009765625],
       [-2.3164062500, 0.2944335938, 0.9575195312, 0.2934570312],
       [-1.6611328125, -1.7333984375, 1.9736328125, -0.9287109375]]]],
    dtype=ms.float16)

freqs = ms.tensor(
    [[[[0.0000000000e+00, 0.0000000000e+00, 0.0000000000e+00,
        0.0000000000e+00],
       [1.0000000000e+00, 9.9975585938e-02, 1.0002136230e-02,
        1.0004043579e-03],
       [2.0000000000e+00, 1.9995117188e-01, 2.0004272461e-02,
        2.0008087158e-03],
       [3.0000000000e+00, 3.0004882812e-01, 2.9998779297e-02,
        3.0002593994e-03],
       [4.0000000000e+00, 3.9990234375e-01, 4.0008544922e-02,
        4.0016174316e-03],
       [5.0000000000e+00, 5.0000000000e-01, 4.9987792969e-02,
        5.0010681152e-03],
       [6.0000000000e+00, 6.0009765625e-01, 5.9997558594e-02,
        6.0005187988e-03],
       [7.0000000000e+00, 7.0019531250e-01, 7.0007324219e-02,
        6.9999694824e-03]]]],
    dtype=ms.float16)

output_pta = ms.tensor(
    [[[[-1.2265625000, -0.0093154907, 1.5419921875, -0.4655761719],
       [-0.3732910156, -0.1444091797, 0.6259765625, -1.1562500000],
       [-2.0312500000, -1.8105468750, 2.1835937500, -0.1967773438],
       [-0.4865722656, -1.0781250000, -0.2934570312, 0.7714843750],
       [0.1992187500, -2.1718750000, 0.3745117188, 0.4055175781],
       [0.1125488281, 1.0800781250, -0.3386230469, 1.3769531250],
       [1.2724609375, 0.7045898438, 1.7060546875, -1.3085937500],
       [-0.1791992188, 0.3090820312, 1.4804687500, 0.6406250000]],

      [[2.7265625000, -1.4755859375, -1.4804687500, 0.0498352051],
       [1.4511718750, -0.7719726562, -0.8842773438, 1.2626953125],
       [-0.7011718750, 0.6640625000, 0.4089355469, -1.0761718750],
       [0.0180053711, 0.0141601562, 0.2744140625, -0.2403564453],
       [-0.8027343750, -1.4375000000, -0.4091796875, 0.3493652344],
       [-0.6596679688, -1.6445312500, -0.7788085938, 1.0371093750],
       [-0.5170898438, 0.6513671875, -1.4345703125, -0.5629882812],
       [0.5541992188, -0.2497558594, 0.0054321289, 0.5375976562]]],

     [[[0.3171386719, -1.8720703125, -0.0894775391, 0.7485351562],
       [0.2490234375, -0.4245605469, 0.1045532227, -0.1524658203],
       [-0.0725097656, 0.6201171875, 0.3188476562, 1.5283203125],
       [0.2304687500, 0.4641113281, -0.3303222656, 1.4023437500],
       [0.3728027344, 0.0136718750, -0.6289062500, -0.3698730469],
       [-0.1466064453, 0.3730468750, 0.1306152344, 1.3642578125],
       [0.4506835938, 0.9248046875, 0.9892578125, 0.1771240234],
       [-1.3525390625, -0.3007812500, 0.8447265625, 1.7988281250]],

      [[0.7456054688, -0.2200927734, -0.1092529297, 0.7529296875],
       [1.0644531250, -0.9990234375, -0.8164062500, -0.7963867188],
       [-0.4897460938, -0.7412109375, 0.1245117188, -1.1035156250],
       [0.0643920898, -0.4536132812, 0.6870117188, -0.3168945312],
       [0.7343750000, 0.2761230469, 1.3925781250, 0.2890625000],
       [-0.8046875000, -0.6064453125, -1.1689453125, 0.4987792969],
       [-1.9570312500, 0.0771484375, 0.8164062500, 0.2951660156],
       [-2.5488281250, -0.7265625000, 1.8525390625, -0.9409179688]]]],
    dtype=ms.float16)

inputs_grad = ms.tensor(
    [[[[1.0000000000, 1.0000000000, 1.0000000000, 1.0000000000],
       [0.5502929688, 0.9960937500, 0.1586914062, 0.9003906250],
       [-0.3962402344, 0.9819335938, 0.0908203125, 0.8012695312],
       [-0.9604492188, 0.9580078125, 0.8583984375, 0.7041015625],
       [-0.6137695312, 0.9248046875, 1.7558593750, 0.6103515625],
       [0.3337402344, 0.8823242188, 1.9570312500, 0.5205078125],
       [1.0195312500, 0.8310546875, 1.2773437500, 0.4350585938],
       [0.8237304688, 0.7714843750, 0.3403320312, 0.3554687500]],

      [[1.0000000000, 1.0000000000, 1.0000000000, 1.0000000000],
       [0.5502929688, 0.9960937500, 0.1586914062, 0.9003906250],
       [-0.3962402344, 0.9819335938, 0.0908203125, 0.8012695312],
       [-0.9604492188, 0.9580078125, 0.8583984375, 0.7041015625],
       [-0.6137695312, 0.9248046875, 1.7558593750, 0.6103515625],
       [0.3337402344, 0.8823242188, 1.9570312500, 0.5205078125],
       [1.0195312500, 0.8310546875, 1.2773437500, 0.4350585938],
       [0.8237304688, 0.7714843750, 0.3403320312, 0.3554687500]]],

     [[[1.0000000000, 1.0000000000, 1.0000000000, 1.0000000000],
       [0.5502929688, 0.9960937500, 0.1586914062, 0.9003906250],
       [-0.3962402344, 0.9819335938, 0.0908203125, 0.8012695312],
       [-0.9604492188, 0.9580078125, 0.8583984375, 0.7041015625],
       [-0.6137695312, 0.9248046875, 1.7558593750, 0.6103515625],
       [0.3337402344, 0.8823242188, 1.9570312500, 0.5205078125],
       [1.0195312500, 0.8310546875, 1.2773437500, 0.4350585938],
       [0.8237304688, 0.7714843750, 0.3403320312, 0.3554687500]],

      [[1.0000000000, 1.0000000000, 1.0000000000, 1.0000000000],
       [0.5502929688, 0.9960937500, 0.1586914062, 0.9003906250],
       [-0.3962402344, 0.9819335938, 0.0908203125, 0.8012695312],
       [-0.9604492188, 0.9580078125, 0.8583984375, 0.7041015625],
       [-0.6137695312, 0.9248046875, 1.7558593750, 0.6103515625],
       [0.3337402344, 0.8823242188, 1.9570312500, 0.5205078125],
       [1.0195312500, 0.8310546875, 1.2773437500, 0.4350585938],
       [0.8237304688, 0.7714843750, 0.3403320312, 0.3554687500]]]],
    dtype=ms.float16)


class TestNet(nn.Cell):
    def __init__(self, config: TransformerConfig):
        super(TestNet, self).__init__()
        self.emb = ApplyRotaryPosEmb(config)
        self.sum = SumExt()
        self.sum.shard(((1, 1, 1, 1),))

    def construct(self, t: Tensor, freqs: Tensor, rotary_interleaved: bool = False):
        output = self.emb(t, freqs, rotary_interleaved)
        out_sum = self.sum(output)
        return out_sum


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--dp',
        default=1,
        type=int,
        required=False,
        help='data_parallel')
    parser.add_argument(
        '--cp',
        default=1,
        type=int,
        required=False,
        help='context_parallel')
    parser.add_argument(
        '--tp',
        default=1,
        type=int,
        required=False,
        help='tensor_parallel')
    args, _ = parser.parse_known_args()
    return args


def get_config(args):
    config = TransformerConfig()
    config.data_parallel = args.dp
    config.tensor_parallel = args.tp
    config.context_parallel = args.cp
    return config


def do_init():
    ms.set_context(deterministic="ON", mode=ms.GRAPH_MODE)
    rank_id = os.environ.get('RANK_ID')
    if rank_id is not None:
        ms.set_auto_parallel_context(parallel_mode=ms.ParallelMode.SEMI_AUTO_PARALLEL, full_batch=True)
        init()
    return rank_id


def main():
    rank_id = do_init()
    args = get_args()
    config = get_config(args)

    emb = ApplyRotaryPosEmb(config)
    output = emb(inputs, freqs, False)
    assert output_pta.equal(output).all()

    test_net = TestNet(config)
    grad_func = ms.grad(test_net, grad_position=(0), weights=None, has_aux=False)
    grad = grad_func(inputs, freqs)
    if rank_id is not None:
        reduce = ms.ops.AllReduce()
        grad = reduce(grad)
    assert inputs_grad.equal(grad).all()


if __name__ == "__main__":
    main()
